// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    static readonly AccountClass s_Account = new AccountClass();
    public static AccountClass Account { get { return s_Account; } }
    static readonly DefaultClass s_Default = new DefaultClass();
    public static DefaultClass Default { get { return s_Default; } }
    static readonly ExampleClass s_Example = new ExampleClass();
    public static ExampleClass Example { get { return s_Example; } }
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class AccountClass
    {
        public readonly string Name = "Account";
        public JanuszMarcinik.Mvc.WebUI.Areas.Account.Controllers.AccountController Account = new JanuszMarcinik.Mvc.WebUI.Areas.Account.Controllers.T4MVC_AccountController();
        public JanuszMarcinik.Mvc.WebUI.Areas.Account.Controllers.ManageController Manage = new JanuszMarcinik.Mvc.WebUI.Areas.Account.Controllers.T4MVC_ManageController();
        public JanuszMarcinik.Mvc.WebUI.Areas.Account.Controllers.RolesController Roles = new JanuszMarcinik.Mvc.WebUI.Areas.Account.Controllers.T4MVC_RolesController();
        public JanuszMarcinik.Mvc.WebUI.Areas.Account.Controllers.UsersController Users = new JanuszMarcinik.Mvc.WebUI.Areas.Account.Controllers.T4MVC_UsersController();
        public T4MVC.Account.SharedController Shared = new T4MVC.Account.SharedController();
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class DefaultClass
    {
        public readonly string Name = "Default";
        public JanuszMarcinik.Mvc.WebUI.Areas.Default.Controllers.HomeController Home = new JanuszMarcinik.Mvc.WebUI.Areas.Default.Controllers.T4MVC_HomeController();
        public T4MVC.Default.SharedController Shared = new T4MVC.Default.SharedController();
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class ExampleClass
    {
        public readonly string Name = "Example";
        public JanuszMarcinik.Mvc.WebUI.Areas.Example.Controllers.ExampleChildrensController ExampleChildrens = new JanuszMarcinik.Mvc.WebUI.Areas.Example.Controllers.T4MVC_ExampleChildrensController();
        public JanuszMarcinik.Mvc.WebUI.Areas.Example.Controllers.ExampleParentsController ExampleParents = new JanuszMarcinik.Mvc.WebUI.Areas.Example.Controllers.T4MVC_ExampleParentsController();
    }
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_PartialViewResult : System.Web.Mvc.PartialViewResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_PartialViewResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        public const string UrlPath = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(UrlPath); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(UrlPath + "/" + fileName); }
        public static readonly string TwitterBootstrapMvcJs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(UrlPath + "/TwitterBootstrapMvcJs.min.js") ? Url("TwitterBootstrapMvcJs.min.js") : Url("TwitterBootstrapMvcJs.js");
    }

    
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        public static partial class Scripts 
        {
            public static class Assets
            {
                public const string TwitterBootstrapMvcJs_js = "~/Scripts/TwitterBootstrapMvcJs.js"; 
            }
        }
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114


